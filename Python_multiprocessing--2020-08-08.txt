---------------------19:49 https://docs.python.org/3/library/multiprocessing.html ------------------------------------------------
Multiprocessing — Process-based parallelism
Effectively side-stepping the Global Interpreter Lock by using subprocesses instead of threads
. This basic example of data parallelism using Pool
	- Processes are spawned by creating a Process object and then calling its start() method
Contexts and start methods
	- Spawn
		• The parent process starts a fresh python interpreter process
		• Child process will only inherit those resources necessary to run the process
		• Unnecessary file descriptors and handles from the parent process will not be inherited
	- Fork
		• Uses os.fork() to fork the Python interpreter
		• All resources of the parent are inherited by the child process
	- Forkserver
		• Usually there should be none, but if a process was killed by a signal there may be some “leaked” resources
		• From multiprocessing import Process, Lock def f(l, i):     l.acquire()     try:         print('hello world', i)     finally:         l.release() if __name__ == '__main__':     lock = Lock()     for num in range(10):         Process(target=f, args=(lock, num)).start()

