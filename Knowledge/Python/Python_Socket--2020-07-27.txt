---------------------20:54 https://docs.python.org/3/library/socket.html ------------------------------------------------
Socket — Low-level networking interface

---------------------20:54 https://docs.python.org/3/howto/sockets.html ------------------------------------------------
Sockets
	- Blocking
	- Non-blocking
	- IPC
Creating a Socket
	- Port 80 - the normal http port
	- Low number ports are usually reserved for “well known” services (HTTP, SNMP etc)
	- If you’re playing around, use a nice high number (4 digits)

	- Used socket.gethostname() so that the socket would be visible to the outside world
	- Listen tells the socket library that we want it to queue up as many as 5 connect requests
	- (the normal max)
	- “server” socket
		• It doesn’t send any data
		• It doesn’t receive any data
		• It just produces “client” sockets
		• Each clientsocket is created in response to some other “client” socket doing a connect() to the host and port we’re bound to
		• As soon as we’ve created that clientsocket, we go back to listening for more connections
Using a Socket
	- As the designer, you will have to decide what the rules of etiquette are for a conversation
	- Send and recv operate on the network buffers
	- They do not necessarily handle all the bytes you hand them
	- Because their major focus is handling the network buffers
	- Return when the associated network buffers have been filled (send) or emptied (recv). They then tell you how many bytes they handled
	- When a recv returns 0 bytes, it means the other side has closed (or is in the process of closing) the connection
			- Chunk = self.sock.recv(min(MSGLEN - bytes_recd, 2048))
			- B'' (Byte in Python)
	- One complication
		• Conversational protocol allows multiple messages to be sent back to back
		• You pass recv an arbitrary chunk size, you may end up reading the start of a following message
		• Put that aside and hold onto it, until it’s needed
Binary Data
	-  possible to send binary data over a socket.
	- Not all machines use the same formats for binary data
	- Socket libraries have calls for converting 16 and 32 bit integers - ntohl, htonl, ntohs, htons
		• “n” means network
		• “h” means host
		• “s” means short
		• “l” means long
	- Where network order is host order, these do nothing
	- Where the machine is byte-reversed, these swap the bytes around appropriately
	- Please close your sockets when you’re done
	- When a socket is garbage collected, it will automatically do a close if it’s needed
When Sockets Die
	- Threads
		• Avoid the overhead associated with the automatic recycling of resources
Non-blocking Sockets
	- In Python, you use socket.setblocking(0) to make it non-blocking
	- Use select?????

