---------------------01:18 https://flask.palletsprojects.com/en/1.1.x/foreword/ ------------------------------------------------
Foreword
What does “micro” mean
	- “micro” in microframework means Flask aims to keep the core simple but extensible
	- Numerous extensions provide database integration, form validation, upload handling, various open authentication technologies, and more

---------------------01:18 https://flask.palletsprojects.com/en/1.1.x/quickstart/#quickstart ------------------------------------------------
A Minimal Application
	- First we imported the Flask class. An instance of this class will be our WSGI application
Variable Rules
	- You can add variable sections to a URL by marking sections with <variable_name>
	- Optionally, you can use a converter to specify the type of the argument like <converter:variable_name>
		• String
		• Int
		• Path
		• Uuid
		• Float
Unique URLs / Redirection Behavior
	- Accessing the URL with a trailing slash produces a 404 “Not Found” error
URL Building
Static Files
Rendering Templates
Accessing Request Data
File Uploads
	- You can access the filename attribute. However please keep in mind that this value can be forged so never ever trust that value
	- If you want to use the filename of the client to store the file on the server, pass it through the secure_filename() function that Werkzeug provides for you:
Cookies
	- If you want to use sessions, do not use the cookies directly but instead use the Sessions in Flask that add some security on top of cookies for you
Redirects and Errors
	- Redirect(url_for('login'))
	- If you want to customize the error page, you can use the errorhandler() decorator:
	- If you want to get hold of the resulting response object inside the view you can use the make_response() function
APIs with JSON
	- Depending on your API design, you may want to create JSON responses for types other than dict. In that case, use the jsonify() function, which will serialize any supported JSON data type
Sessions
	- Second object called session which allows you to store information specific to a user from one request to the next
	- From markupsafe import escape
	- If 'username' in session:         return 'Logged in as %s' % escape(session['username'])
How to generate good secret keys
	- Python -c 'import os; print(os.urandom(16))'
	- This is implemented on top of cookies for you and signs the cookies cryptographically. What this means is that the user could look at the contents of your cookie but not modify it, unless they know the secret key used for signing
Message Flashing
	- The flashing system basically makes it possible to record a message at the end of a request and access it on the next (and only the next) request
	- Check out the Message Flashing for a full example
Logging
	- As of Flask 0.3 a logger is preconfigured for you to use
		• App.logger.debug('A value for debugging')
		• App.logger.warning('A warning occurred (%d apples)', 42)
	- The attached logger is a standard logging Logger

